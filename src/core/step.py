"""Sistema de navega√ß√£o SimpleMMO Bot - Passos (steps)"""

import random
import time
import tkinter as tk

from selenium.webdriver.common.by import By

from core.context import registrar_acao
from driver.actions import buscar_botao_por_texto, clicar_elemento
from driver.manager import get_driver
from utils.logger import inserir_log

# ===============================
# FUN√á√ïES DE PASSO (STEP)
# ===============================


def tentar_passo(driver, log_fn=print) -> bool:
    """Fun√ß√£o original mantida para compatibilidade."""
    try:
        log_fn(f"üåê URL atual: {driver.current_url}")
        log_fn("üîç Procurando bot√£o 'Take a step'...")
        botoes = driver.find_elements(By.XPATH, "//button[contains(., 'Take a step')]")
        if not botoes:
            botoes = driver.find_elements(By.XPATH, "//a[contains(., 'Take a step')]")
        log_fn(f"Encontrados {len(botoes)} bot√µes 'Take a step'.")
        for botao in botoes:
            log_fn(
                f"Bot√£o exibido: {botao.is_displayed()}, habilitado: {botao.is_enabled()}"
            )
            if botao.is_displayed() and botao.is_enabled():
                delay = random.uniform(1.5, 2.5)
                log_fn(f"Aguardando {delay:.2f}s antes de clicar no bot√£o.")
                time.sleep(delay)
                botao.click()
                registrar_acao("Passo")
                log_fn("‚úî Passo realizado")
                return True
        log_fn("‚è≥ Nenhum bot√£o de passo dispon√≠vel para clicar.")
        return False
    except Exception as e:
        log_fn(f"‚ö†Ô∏è Erro ao tentar passo: {e}")
        return False


def tentar_passo_modular(log_box: tk.Text | None) -> bool:
    """Vers√£o modular otimizada para tentar dar um passo - DETEC√á√ÉO R√ÅPIDA."""
    driver = get_driver()
    if not driver:
        return False

    try:
        # Busca r√°pida usando buscar_botao_por_texto otimizado
        resultado = buscar_botao_por_texto("Take a step", todos=False)
        if not resultado:
            return False

        # Verifica se √© uma lista ou um elemento √∫nico
        botao = resultado[0] if isinstance(resultado, list) else resultado

        # Clica no bot√£o encontrado com delay m√≠nimo
        if clicar_elemento(botao):
            inserir_log(log_box, "‚úî Passo realizado", "info")
            registrar_acao("Passo")
            return True

        return False
    except Exception as e:
        inserir_log(log_box, f"‚ö†Ô∏è Erro ao tentar passo: {e}", "error")
        return False


def executar_step_interno(log_box: tk.Text | None) -> bool:
    """Executa um step internamente sem logging externo - OTIMIZADO."""
    driver = get_driver()
    if not driver:
        return False

    try:
        # Busca r√°pida usando buscar_botao_por_texto otimizado
        resultado = buscar_botao_por_texto("Take a step", todos=False)
        if not resultado:
            inserir_log(
                log_box,
                "üîç Nenhum bot√£o de step encontrado para execu√ß√£o interna",
                debug=True,
            )
            return False

        # Verifica se √© uma lista ou um elemento √∫nico
        botao = resultado[0] if isinstance(resultado, list) else resultado

        # Clica no bot√£o encontrado
        if clicar_elemento(botao):
            registrar_acao("Passo")
            inserir_log(log_box, "üö∂‚Äç‚ôÇÔ∏è Step interno executado com sucesso", debug=True)
            return True

        inserir_log(log_box, "‚ùå Falha ao clicar em bot√£o de step interno", debug=True)
        return False
    except Exception as e:
        inserir_log(log_box, f"‚ùå Erro no step interno: {e}", debug=True)
        return False


def dar_step(log_box=None) -> bool:
    """Vers√£o otimizada da fun√ß√£o de dar passo - DETEC√á√ÉO ULTRA-R√ÅPIDA COM DEBUG."""
    inserir_log(log_box, "üîç Iniciando tentativa de dar step...", debug=True)

    # Primeira tentativa: fun√ß√£o ultra-r√°pida
    inserir_log(log_box, "üöÄ Tentando fun√ß√£o r√°pida...", debug=True)
    if clicar_step_rapido(log_box):
        inserir_log(log_box, "‚úÖ Step realizado pela fun√ß√£o r√°pida", debug=True)
        return True

    inserir_log(log_box, "‚ö†Ô∏è Fun√ß√£o r√°pida falhou, tentando fallback...", debug=True)

    # Fallback: vers√£o original com delay reduzido
    try:
        driver = get_driver()
        if not driver:
            inserir_log(log_box, "‚ùå Driver n√£o dispon√≠vel")
            return False

        inserir_log(log_box, "üîç Procurando bot√µes Take a step...", debug=True)

        # Busca otimizada: primeiro tenta bot√µes, depois links se necess√°rio
        botoes = driver.find_elements(
            By.XPATH, "//button[contains(., 'Take a step')]"
        ) or driver.find_elements(By.XPATH, "//a[contains(., 'Take a step')]")

        inserir_log(log_box, f"üìä Encontrados {len(botoes)} elementos", debug=True)

        # Verifica apenas os primeiros 2 elementos para acelerar
        for i, botao in enumerate(botoes[:2]):
            try:
                is_displayed = botao.is_displayed()
                is_enabled = botao.is_enabled()
                text = botao.text.strip() if hasattr(botao, "text") else "N/A"

                inserir_log(
                    log_box,
                    f"üîç Elemento {i + 1}: '{text}' (display: {is_displayed}, enabled: {is_enabled})",
                    debug=True,
                )

                if is_displayed and is_enabled:
                    # Delay m√≠nimo - apenas o necess√°rio para parecer humano
                    delay = random.uniform(0.3, 0.7)
                    inserir_log(
                        log_box,
                        f"‚è∞ Aguardando {delay:.2f}s antes do clique...",
                        debug=True,
                    )
                    time.sleep(delay)

                    botao.click()
                    registrar_acao("Passo")
                    inserir_log(log_box, "‚úî Passo realizado (fallback)")
                    return True
                else:
                    inserir_log(
                        log_box,
                        f"‚ùå Elemento {i + 1} n√£o dispon√≠vel para clique",
                        debug=True,
                    )
            except Exception as e:
                inserir_log(log_box, f"‚ùå Erro no elemento {i + 1}: {e}", debug=True)
                continue  # Tenta pr√≥ximo bot√£o se este falhar

        inserir_log(log_box, "‚è≥ Nenhum bot√£o de passo dispon√≠vel")
        return False
    except Exception as e:
        inserir_log(log_box, f"‚ö†Ô∏è Erro ao dar passo: {e}")
        return False


def navegar_para_travel(log_box=None) -> None:
    """Navega para a p√°gina de travel."""
    try:
        driver = get_driver()
        if not driver:
            inserir_log(log_box, "‚ùå Driver n√£o dispon√≠vel")
            return

        inserir_log(log_box, "üß≠ Navegando para travel...")
        driver.get("https://web.simple-mmo.com/travel")
        time.sleep(2)

    except Exception as e:
        inserir_log(log_box, f"‚ö†Ô∏è Erro ao navegar: {e}")


# ===============================
# FUN√á√ïES AUXILIARES
# ===============================


def verificar_botoes_step() -> int:
    """Verifica quantos bot√µes de step est√£o dispon√≠veis."""
    botoes_step = buscar_botao_por_texto("Take a step", todos=True)
    if isinstance(botoes_step, list):
        return len(botoes_step)
    if botoes_step is not None:
        return 1
    return 0


# ===============================
# FUNC√ïES OTIMIZADAS ESPEC√çFICAS
# ===============================


def buscar_botao_step_rapido() -> bool:
    """Busca espec√≠fica ultra-r√°pida para bot√µes Take a step."""
    driver = get_driver()
    if not driver:
        return False

    try:
        # XPath direto e mais espec√≠fico
        xpath = "//button[contains(., 'Take a step')]"
        botoes = driver.find_elements(By.XPATH, xpath)

        # Verifica apenas o primeiro elemento encontrado
        if botoes:
            botao = botoes[0]
            return botao.is_displayed() and botao.is_enabled()

        # Fallback para links (raramente usado)
        xpath_link = "//a[contains(., 'Take a step')]"
        links = driver.find_elements(By.XPATH, xpath_link)
        if links:
            link = links[0]
            return link.is_displayed() and link.is_enabled()

        return False
    except Exception:
        return False


def clicar_step_rapido(log_box=None) -> bool:
    """Clica rapidamente no bot√£o Take a step sem delays desnecess√°rios - COM DEBUG E FALLBACKS."""
    driver = get_driver()
    if not driver:
        inserir_log(log_box, "‚ùå Driver n√£o dispon√≠vel (fun√ß√£o r√°pida)", debug=True)
        return False

    try:
        inserir_log(log_box, "üîç Buscando bot√µes (fun√ß√£o r√°pida)...", debug=True)

        # Lista de XPaths para tentar (do mais espec√≠fico ao mais geral)
        xpath_variants = [
            "//button[contains(., 'Take a step')]",
            "//button[contains(text(), 'Take a step')]",
            "//button[text()='Take a step']",
            "//button[contains(., 'step')]",
            "//input[@type='submit'][contains(@value, 'Take a step')]",
            "//input[@type='button'][contains(@value, 'Take a step')]",
        ]

        botoes = []
        for xpath in xpath_variants:
            try:
                elementos = driver.find_elements(By.XPATH, xpath)
                if elementos:
                    botoes.extend(elementos)
                    inserir_log(
                        log_box,
                        f"üìä XPath '{xpath}' encontrou {len(elementos)} elementos",
                        debug=True,
                    )
            except Exception as e:
                inserir_log(log_box, f"‚ùå Erro no XPath '{xpath}': {e}", debug=True)

        inserir_log(
            log_box, f"üìä Total de elementos encontrados: {len(botoes)}", debug=True
        )

        if botoes:
            # Tenta o primeiro bot√£o v√°lido
            for i, botao in enumerate(botoes[:3]):  # M√°ximo 3 tentativas
                try:
                    is_displayed = botao.is_displayed()
                    is_enabled = botao.is_enabled()
                    text = (
                        botao.text.strip()
                        if hasattr(botao, "text")
                        else botao.get_attribute("value") or "N/A"
                    )

                    inserir_log(
                        log_box,
                        f"üîç Bot√£o {i + 1}: '{text}' (display: {is_displayed}, enabled: {is_enabled})",
                        debug=True,
                    )

                    if is_displayed and is_enabled:
                        # Delay m√≠nimo apenas para parecer humano
                        delay = random.uniform(0.2, 0.5)
                        inserir_log(
                            log_box, f"‚è∞ Delay r√°pido: {delay:.2f}s", debug=True
                        )
                        time.sleep(delay)

                        botao.click()
                        registrar_acao("Passo")
                        inserir_log(log_box, "‚úî Passo realizado (r√°pido)")
                        return True
                    else:
                        inserir_log(
                            log_box, f"‚ùå Bot√£o {i + 1} n√£o dispon√≠vel", debug=True
                        )
                except Exception as e:
                    inserir_log(log_box, f"‚ùå Erro no bot√£o {i + 1}: {e}", debug=True)

        # Fallback para links
        inserir_log(log_box, "üîç Tentando links (fun√ß√£o r√°pida)...", debug=True)
        xpath_link_variants = [
            "//a[contains(., 'Take a step')]",
            "//a[contains(text(), 'Take a step')]",
            "//a[text()='Take a step']",
            "//a[contains(., 'step')]",
        ]

        links = []
        for xpath in xpath_link_variants:
            try:
                elementos = driver.find_elements(By.XPATH, xpath)
                if elementos:
                    links.extend(elementos)
                    inserir_log(
                        log_box,
                        f"üìä XPath link '{xpath}' encontrou {len(elementos)} elementos",
                        debug=True,
                    )
            except Exception as e:
                inserir_log(
                    log_box, f"‚ùå Erro no XPath link '{xpath}': {e}", debug=True
                )

        inserir_log(log_box, f"üìä Total de links encontrados: {len(links)}", debug=True)

        if links:
            link = links[0]
            try:
                is_displayed = link.is_displayed()
                is_enabled = link.is_enabled()
                text = link.text.strip() if hasattr(link, "text") else "N/A"

                inserir_log(
                    log_box,
                    f"üîç Link: '{text}' (display: {is_displayed}, enabled: {is_enabled})",
                    debug=True,
                )

                if is_displayed and is_enabled:
                    delay = random.uniform(0.2, 0.5)
                    time.sleep(delay)
                    link.click()
                    registrar_acao("Passo")
                    inserir_log(log_box, "‚úî Passo realizado (r√°pido - link)")
                    return True
                else:
                    inserir_log(
                        log_box, "‚ùå Link n√£o dispon√≠vel (fun√ß√£o r√°pida)", debug=True
                    )
            except Exception as e:
                inserir_log(log_box, f"‚ùå Erro no link: {e}", debug=True)

        inserir_log(
            log_box, "‚ùå Nenhum elemento v√°lido encontrado (fun√ß√£o r√°pida)", debug=True
        )
        return False
    except Exception as e:
        inserir_log(log_box, f"‚ö†Ô∏è Erro no step r√°pido: {e}")
        return False


# ===============================
# FUN√á√ïES DE PASSO (STEP) - ORIGINAIS
# ===============================
